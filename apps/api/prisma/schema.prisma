// apps/api/prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  passwordHash String?
  role          Role     @default(USER)

  bids      Bid[]  @relation("UserBids") 
}
model AuctionActiveBid {
  id          String   @id @default(cuid())
  auctionId   String
  auction     Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)

  saleDateTs  BigInt?  @map("sale_date_ts")  // "1759320000000" → BigInt
  currentBid  Int?
  bidUpdated  Int?
  dateUpdated Int?

  createdAt   DateTime @default(now())

  @@index([auctionId, createdAt])
}
model Vehicle {
  id           String   @id @default(cuid())
  vin          String   @unique
  make         String?
  model        String?
  year         Int?

  bodyStyle    String?  @map("body_style")
  fuel         String?
  engineType   String?  @map("engine_type")
  cylinders    Int?
  drive        String?
  transmission String?
  color        String?
  vehicleType  String?  @map("vehicle_type")
  series       String?
  odometer     Int?
  keysPresent  Boolean? @map("keys_present")

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt @default(now())  // ← DODANE @default(now())

  auctions     Auction[]
  @@index([make, model])
  @@index([year])
}
model Auction {
  id           String        @id @default(cuid())
  title        String
  vin          String?
  startsAt     DateTime
  endsAt       DateTime
  currentPrice Int           @default(0)
  status       AuctionStatus @default(SCHEDULED)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  // źródło
  source    String   @default("MANUAL")
  sourceId  String?
  sourceUrl String?
  raw       Json?

  // link do pojazdu
  vehicleId String?
  vehicle   Vehicle? @relation(fields: [vehicleId], references: [id])

  // atrybuty aukcyjne
  auctionHouse     String?   @map("auction_house")
  location         String?
  lotNumber        Int?      @map("lot_number")
  estRetailValue   Int?      @map("est_retail_value")
  primaryDamage    String?
  secondaryDamage  String?
  currencyCode     String?   @map("currency_code")
  buyNowPrice      Int?      @map("buy_now_price")
  vendorCurrentBid Int?      @map("vendor_current_bid")
  saleDateTs       BigInt?   @map("sale_date_ts")

  photos     AuctionPhoto[]
  bids       Bid[]
  activeBids AuctionActiveBid[]

  @@index([status])
  @@index([endsAt])
  @@index([auctionHouse])
  @@index([location])
  @@index([lotNumber])
  @@index([estRetailValue])
  @@index([primaryDamage])
  @@index([secondaryDamage])
  @@index([currencyCode])
  @@index([currentPrice])
  @@unique([source, sourceId], name: "source_sourceId")
  @@index([vin])
  @@index([vehicleId])
}


model AuctionPhoto {
  id        String   @id @default(cuid())
  auctionId String
  url       String   // np. /uploads/abc.jpg
  sort      Int      @default(0)
  createdAt DateTime @default(now())

  auction   Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)

  @@index([auctionId, sort])
  @@unique([auctionId, url], map: "auctionId_url")
}

model Bid {
  id        String   @id @default(cuid())
  amount    Int
  createdAt DateTime @default(now())

  userId    String
  auctionId String

  user      User    @relation(fields: [userId], references: [id], name: "UserBids")
  auction   Auction @relation(fields: [auctionId], references: [id])

  @@index([auctionId, createdAt])
}


enum AuctionStatus {
  SCHEDULED
  LIVE
  ENDED
  CANCELLED
}


enum Role {
  USER
  ADMIN
}